apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: grafana-deployment
  namespace: zcp-system 
spec:
  replicas: 1
  template:
    metadata:
      labels:
        component: grafana
    spec:
      tolerations:
      - key: "management"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      restartPolicy: Always
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - "amd64"
              - key: node-role.kubernetes.io/management
                operator: Exists
      containers:
      - image: registry.au-syd.bluemix.net/cloudzcp/grafana:5.0.4
        name: grafana
        resources:
          limits:
            cpu: 100m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 100Mi        
        env:
        - name: GF_SECURITY_ADMIN_USER
          value: admin
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: admin
        - name: GF_SERVER_DOMAIN
          valueFrom:
            configMapKeyRef:
              name: monitoring-grafana-config
              key: GF_SERVER_DOMAIN
        - name: GF_AUTH_GENERIC_OAUTH_AUTH_URL
          valueFrom:
            configMapKeyRef:
              name: monitoring-grafana-config
              key: GF_AUTH_GENERIC_OAUTH_AUTH_URL
#        - name: GF_INSTALL_PLUGINS
#          value: grafana-clock-panel,grafana-worldmap-panel
        ports:
        - containerPort: 3000
          name: grafana
          protocol: TCP
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /api/health
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 30
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /api/health
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 30
        volumeMounts:
        - mountPath: /var/lib/grafana
          name: grafana-storage
        - mountPath: /etc/grafana
          name: config-volume
        - mountPath: /var/lib/grafana/dashboards/system
          name: dashboard-system-volume
        - mountPath: /var/lib/grafana/dashboards/cluster
          name: dashboard-cluster-volume
        - mountPath: /var/lib/grafana/dashboards/container
          name: dashboard-container-volume
        - mountPath: /var/lib/grafana/dashboards/addon
          name: dashboard-addon-volume
        - mountPath: /etc/provisioning/dashboards
          name: config-volume-provisioning
        - mountPath: /etc/provisioning/datasources
          name: config-volume-provisioning-prometheus 
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-data
      - name: dashboard-system-volume
        configMap:
          defaultMode: 420
          name: monitoring-grafana-dashboard-system 
      - name: dashboard-cluster-volume
        configMap:
          defaultMode: 420
          name: monitoring-grafana-dashboard-cluster
      - name: dashboard-container-volume
        configMap:
          defaultMode: 420
          name: monitoring-grafana-dashboard-container
      - name: dashboard-addon-volume
        configMap:
          defaultMode: 420
          name: monitoring-grafana-dashboard-addon
      - name: config-volume
        configMap:
          defaultMode: 420
          name: monitoring-grafana-config
      - name: config-volume-provisioning
        configMap:
          defaultMode: 420
          name: monitoring-grafana-config-provisioning
      - name: config-volume-provisioning-prometheus
        configMap:
          defaultMode: 420
          name: monitoring-grafana-config-provisioning-prometheus
